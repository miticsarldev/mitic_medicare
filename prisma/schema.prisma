// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ======== ENUMS ========

enum UserRole {
    SUPER_ADMIN
    HOSPITAL_ADMIN
    INDEPENDENT_DOCTOR
    HOSPITAL_DOCTOR
    PATIENT
}

enum UserGenre {
    MALE
    FEMALE
}

// ======== AUTHENTICATION & USER MODELS ========

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique @db.VarChar(255)
    phone         String    @unique @db.VarChar(20)
    password      String    @db.Text
    role          UserRole
    emailVerified DateTime?
    dateOfBirth   DateTime?
    isApproved    Boolean   @default(false)
    isActive      Boolean   @default(true)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    profile           UserProfile?
    accounts          Account[]
    sessions          Session[]
    hospital          Hospital?
    doctor            Doctor?
    patient           Patient?
    medicalHistories  MedicalHistory[]
    reviews           Review[]         @relation("ReviewAuthor")
    favoriteDoctors   Doctor[]         @relation("UserFavorites")
    favoriteHospitals Hospital[]       @relation("UserFavoriteHospitals")
}

model UserProfile {
    id        String     @id @default(cuid())
    userId    String     @unique
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    address   String?    @db.VarChar(255)
    city      String?
    state     String?
    zipCode   String?
    country   String?
    bio       String?    @db.Text
    avatarUrl String?
    genre     UserGenre?
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ======== Patient MODELS ========
enum BloodType {
    A_POSITIVE
    A_NEGATIVE
    B_POSITIVE
    B_NEGATIVE
    AB_POSITIVE
    AB_NEGATIVE
    O_POSITIVE
    O_NEGATIVE
}

model Patient {
    id                String     @id @default(cuid())
    userId            String     @unique
    user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    bloodType         BloodType?
    allergies         String?
    emergencyContact  String?
    emergencyPhone    String?
    emergencyRelation String?
    insuranceProvider String?
    insuranceNumber   String?
    medicalNotes      String?
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt

    // Relations
    appointments      Appointment[]
    medicalHistories  MedicalHistory[]
    medicalRecords    MedicalRecord[]
    prescriptions     Prescription[]
    vitalSigns        VitalSign[]
    PrescriptionOrder PrescriptionOrder[]

    @@index([userId])
}

// ======== DOCTOR MODELS ========
model Doctor {
    id               String      @id @default(cuid())
    userId           String      @unique
    user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    hospitalId       String?
    hospital         Hospital?   @relation(fields: [hospitalId], references: [id])
    departmentId     String?
    department       Department? @relation(fields: [departmentId], references: [id])
    specialization   String
    licenseNumber    String      @unique
    education        String?     @db.Text
    experience       String?     @db.Text
    isVerified       Boolean     @default(false)
    isIndependent    Boolean     @default(false)
    availableForChat Boolean     @default(true)
    consultationFee  Decimal?    @db.Decimal(10, 2)
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt

    // Relations
    appointments      Appointment[]
    medicalRecords    MedicalRecord[]
    prescriptions     Prescription[]
    availabilities    DoctorAvailability[]
    subscription      Subscription?
    reviews           Review[]             @relation("DoctorReviews")
    favoritedBy       User[]               @relation("UserFavorites")
    PrescriptionOrder PrescriptionOrder[]
    MedicalHistory    MedicalHistory[]

    @@index([specialization])
    @@index([hospitalId])
    @@index([departmentId])
}

model DoctorAvailability {
    id           String   @id @default(cuid())
    doctorId     String
    doctor       Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    dayOfWeek    Int // 0-6 for Sunday-Saturday
    startTime    String // Format: "HH:MM" in 24-hour format
    endTime      String // Format: "HH:MM" in 24-hour format
    slotDuration Int // en minutes (ex: 60)
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([doctorId, dayOfWeek, startTime, endTime])
}

// ======== CORE HEALTHCARE MODELS ========
enum HospitalStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    PENDING
}

model Hospital {
    id          String         @id @default(cuid())
    name        String
    adminId     String         @unique
    admin       User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
    address     String
    city        String
    state       String
    zipCode     String
    country     String
    phone       String
    email       String
    website     String?
    description String?
    logoUrl     String?
    isVerified  Boolean        @default(false)
    status      HospitalStatus @default(ACTIVE)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    // Relations
    doctors        Doctor[]
    departments    Department[]
    appointments   Appointment[]
    medicalRecords MedicalRecord[]
    subscription   Subscription?
    reviews        Review[]        @relation("HospitalReviews")
    favoritedBy    User[]          @relation("UserFavoriteHospitals") // 👈 Nouveau

    @@index([name])
    @@index([city, country])
}

model Department {
    id          String   @id @default(cuid())
    name        String
    hospitalId  String
    hospital    Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
    description String?  @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    doctors Doctor[]

    @@unique([hospitalId, name])
}

enum AppointmentStatus {
    PENDING
    CONFIRMED
    COMPLETED
    CANCELED
    NO_SHOW
}

model Appointment {
    id                 String            @id @default(cuid())
    patientId          String
    patient            Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctorId           String
    doctor             Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    hospitalId         String?
    hospital           Hospital?         @relation(fields: [hospitalId], references: [id])
    scheduledAt        DateTime
    startTime          DateTime?
    endTime            DateTime?
    status             AppointmentStatus @default(PENDING)
    type               String? // e.g., "Consultation", "Follow-up", "Emergency"
    reason             String?           @db.Text
    notes              String?           @db.Text
    completedAt        DateTime?
    cancelledAt        DateTime?
    cancellationReason String?           @db.Text
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt

    // Relations
    medicalRecord MedicalRecord?

    @@index([patientId])
    @@index([doctorId])
    @@index([scheduledAt])
    @@index([status])
}

// ======== MEDICAL RECORDS MODELS ========
// Historique médical du patient (diabète, hypertension, etc.)
// Historique du patient sur le long terme (maladies chroniques, allergies, conditions passées ou continues)
model MedicalHistory {
    id            String    @id @default(cuid())
    patientId     String
    patient       Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctorId      String?
    doctor        Doctor?   @relation(fields: [doctorId], references: [id], onDelete: SetNull)
    title         String
    condition     String
    diagnosedDate DateTime?
    status        String // "ACTIVE", "RESOLVED", "CHRONIC"
    details       String?   @db.Text
    createdBy     String
    createdByUser User      @relation(fields: [createdBy], references: [id])
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@index([patientId])
    @@index([createdBy])
    @@index([status])
}

// Résultat d’une consultation, lié à un Appointment
// Résultat d’une consultation ponctuelle (liée à un rendez-vous)
model MedicalRecord {
    id             String       @id @default(cuid())
    patientId      String
    patient        Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctorId       String
    doctor         Doctor       @relation(fields: [doctorId], references: [id])
    appointmentId  String?      @unique
    appointment    Appointment? @relation(fields: [appointmentId], references: [id])
    hospitalId     String?
    hospital       Hospital?    @relation(fields: [hospitalId], references: [id])
    diagnosis      String       @db.Text
    treatment      String?      @db.Text
    notes          String?      @db.Text
    followUpNeeded Boolean      @default(false)
    followUpDate   DateTime?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    // Relations
    attachments       MedicalRecordAttachment[]
    prescriptionOrder PrescriptionOrder[]
    prescription      Prescription[]

    @@index([patientId])
    @@index([doctorId])
    @@index([appointmentId])
    @@index([createdAt])
}

// Les fichiers d'analyses liés aux résultats d’une consultation
model MedicalRecordAttachment {
    id              String        @id @default(cuid())
    medicalRecordId String
    medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
    fileName        String
    fileType        String
    fileUrl         String
    fileSize        Int
    uploadedAt      DateTime      @default(now())

    @@index([medicalRecordId])
}

// ======== PRESCRIPTIONS ========
model Prescription {
    id                  String             @id @default(cuid())
    patientId           String
    patient             Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctorId            String
    doctor              Doctor             @relation(fields: [doctorId], references: [id])
    medicationName      String
    dosage              String
    frequency           String
    duration            String?
    instructions        String?            @db.Text
    isActive            Boolean            @default(true)
    startDate           DateTime
    endDate             DateTime?
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    prescriptionOrderId String?
    prescriptionOrder   PrescriptionOrder? @relation(fields: [prescriptionOrderId], references: [id])
    medicalRecordId     String?
    medicalRecord       MedicalRecord?     @relation(fields: [medicalRecordId], references: [id])

    @@index([patientId])
    @@index([doctorId])
    @@index([isActive])
}

model PrescriptionOrder {
    id              String         @id @default(cuid())
    medicalRecordId String
    medicalRecord   MedicalRecord  @relation(fields: [medicalRecordId], references: [id])
    doctorId        String
    doctor          Doctor         @relation(fields: [doctorId], references: [id])
    patientId       String
    patient         Patient        @relation(fields: [patientId], references: [id])
    issuedAt        DateTime       @default(now())
    notes           String?        @db.Text
    prescriptions   Prescription[]

    @@index([medicalRecordId])
}

// ======== VITAL SIGNS MODELS ========
model VitalSign {
    id                     String   @id @default(cuid())
    patientId              String
    patient                Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
    temperature            Decimal? @db.Decimal(5, 2)
    heartRate              Int?
    bloodPressureSystolic  Int?
    bloodPressureDiastolic Int?
    respiratoryRate        Int?
    oxygenSaturation       Int?
    weight                 Decimal? @db.Decimal(5, 2)
    height                 Decimal? @db.Decimal(5, 2)
    notes                  String?  @db.Text
    recordedAt             DateTime @default(now())
    createdAt              DateTime @default(now())

    @@index([patientId])
    @@index([recordedAt])
}

// ======== SUBSCRIPTION MODEL ========

enum SubscriptionStatus {
    ACTIVE
    INACTIVE
    TRIAL
    EXPIRED
    PENDING
}

enum SubscriptionPlan {
    FREE
    STANDARD
    PREMIUM
}

enum SubscriberType {
    DOCTOR
    HOSPITAL
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    CANCELED
}

enum PaymentMethod {
    CREDIT_CARD
    BANK_TRANSFER
    MOBILE_MONEY
    CASH
}

model Subscription {
    id             String             @id @default(cuid())
    subscriberType SubscriberType
    doctorId       String?            @unique
    doctor         Doctor?            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    hospitalId     String?            @unique
    hospital       Hospital?          @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
    plan           SubscriptionPlan
    status         SubscriptionStatus
    startDate      DateTime
    endDate        DateTime
    amount         Decimal            @db.Decimal(10, 2)
    currency       String             @default("USD")
    autoRenew      Boolean            @default(true)
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt

    // Relations
    payments SubscriptionPayment[]

    @@index([status])
    @@index([endDate])
}

model SubscriptionPayment {
    id             String        @id @default(cuid())
    subscriptionId String
    subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
    amount         Decimal       @db.Decimal(10, 2)
    currency       String        @default("XOF")
    paymentMethod  PaymentMethod @default(MOBILE_MONEY) // "CREDIT_CARD", "BANK_TRANSFER", "MOBILE_MONEY"
    transactionId  String?
    status         PaymentStatus @default(PENDING) // "PENDING", "COMPLETED", "FAILED"
    paymentDate    DateTime      @default(now())
    createdAt      DateTime      @default(now())

    @@index([subscriptionId])
    @@index([status])
    @@index([paymentDate])
}

// ======== BILLING ENUM ========
enum BillingInterval {
    MONTH
    YEAR
}

// ======== PLAN CONFIG MODELS ========
model PlanConfig {
    id          String           @id @default(cuid())
    code        SubscriptionPlan @unique // FREE | STANDARD | PREMIUM
    name        String
    description String?          @db.Text
    price       Decimal          @default(0) @db.Decimal(10, 2) // canonical price for the plan
    currency    String           @default("XOF")
    interval    BillingInterval  @default(MONTH) // billing cadence for the price
    isActive    Boolean          @default(true)
    updatedAt   DateTime         @updatedAt
    createdAt   DateTime         @default(now())

    // 1-1 limits
    limits PlanLimits?
    prices PlanPrice[]
}

model PlanPrice {
    id             String          @id @default(cuid())
    planConfigId   String
    plan           PlanConfig      @relation(fields: [planConfigId], references: [id], onDelete: Cascade)
    subscriberType SubscriberType
    interval       BillingInterval @default(MONTH)
    currency       String          @default("XOF")
    amount         Decimal         @db.Decimal(10, 2)
    isActive       Boolean         @default(true)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt

    @@unique([planConfigId, subscriberType, interval, currency])
}

model PlanLimits {
    id           String     @id @default(cuid())
    planConfigId String     @unique
    plan         PlanConfig @relation(fields: [planConfigId], references: [id], onDelete: Cascade)

    // configurable quotas (all optional; null means “unlimited”)
    maxAppointments       Int?
    maxPatients           Int?
    maxDoctorsPerHospital Int?
    storageGb             Int?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

// ======== REVIEW MODELS ========
enum ReviewStatus {
    PENDING
    APPROVED
    REJECTED
}

enum ReviewTargetType {
    DOCTOR
    HOSPITAL
    PLATFORM
}

model Review {
    id          String           @id @default(cuid())
    title       String
    content     String           @db.Text
    rating      Int // 1-5 stars
    authorId    String
    author      User             @relation("ReviewAuthor", fields: [authorId], references: [id])
    targetType  ReviewTargetType
    doctorId    String?
    doctor      Doctor?          @relation("DoctorReviews", fields: [doctorId], references: [id])
    hospitalId  String?
    hospital    Hospital?        @relation("HospitalReviews", fields: [hospitalId], references: [id])
    status      ReviewStatus     @default(PENDING)
    isAnonymous Boolean          @default(false)
    isFeatured  Boolean          @default(false)
    likes       Int              @default(0)
    dislikes    Int              @default(0)
    reports     Int              @default(0)
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt

    @@index([authorId])
    @@index([doctorId])
    @@index([hospitalId])
    @@index([status])
    @@index([rating])
    @@index([isFeatured])
    @@index([createdAt])
}
