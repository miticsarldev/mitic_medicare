// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    super_admin
    hospital_admin
    independent_doctor
    hospital_doctor
    patient
}

enum InstitutionType {
    independent_doctor
    hospital
}

enum PatientSubscriptionPlan {
    free
    basic
    premium
}

enum DoctorSubscriptionPlan {
    basic
    premium
}

enum HospitalSubscriptionPlan {
    standard
    enterprise
}

enum SubscriptionStatus {
    active
    inactive
    trial
    expired
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    password      String
    role          UserRole
    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    userProfile            UserProfile?
    accounts               Account[]
    sessions               Session[]
    patientSubscription    PatientSubscription?
    doctorSubscription     DoctorSubscription?   @relation(fields: [doctorSubscriptionId], references: [id])
    hospitalSubscription   HospitalSubscription? @relation(fields: [hospitalSubscriptionId], references: [id])
    doctorSubscriptionId   String?
    hospitalSubscriptionId String?
    Hospital               Hospital?
    Doctor                 Doctor?
    Patient                Patient?
}

model UserProfile {
    id              String           @id @default(cuid())
    userId          String           @unique
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    institutionId   String? // ID of Hospital if assigned
    institutionType InstitutionType?
    phone           String?
    address         String?
    city            String?
    state           String?
    zipCode         String?
    country         String?
    bio             String?
    avatarUrl       String?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Hospital {
    id          String   @id @default(cuid())
    name        String
    address     String
    city        String
    state       String
    zipCode     String
    country     String
    phone       String
    email       String
    website     String?
    description String?
    logoUrl     String?
    adminId     String   @unique
    admin       User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    doctors      Doctor[]
    patients     Patient[]
    subscription HospitalSubscription?
}

model Doctor {
    id              String           @id @default(cuid())
    userId          String           @unique
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    specialization  String
    licenseNumber   String
    isVerified      Boolean          @default(false)
    institutionId   String? // Nullable if independent
    institutionType InstitutionType?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt

    // Relations
    appointments Appointment[]
    subscription DoctorSubscription?
    Hospital     Hospital?           @relation(fields: [hospitalId], references: [id])
    hospitalId   String?
}

model Patient {
    id           String   @id @default(cuid())
    userId       String   @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateOfBirth  DateTime
    bloodType    String?
    allergies    String?
    medicalNotes String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    appointments          Appointment[]
    subscription          PatientSubscription? @relation(fields: [patientSubscriptionId], references: [id])
    medicalHistories      MedicalHistory[]
    Hospital              Hospital?            @relation(fields: [hospitalId], references: [id])
    hospitalId            String?
    patientSubscriptionId String?
}

model Appointment {
    id        String   @id @default(cuid())
    patientId String
    patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctorId  String
    doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    date      DateTime
    status    String   @default("PENDING") // PENDING, CONFIRMED, CANCELED
    createdAt DateTime @default(now())
}

model PatientSubscription {
    id        String                  @id @default(cuid())
    userId    String                  @unique
    user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    plan      PatientSubscriptionPlan
    status    SubscriptionStatus
    startDate DateTime
    endDate   DateTime
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt
    Patient   Patient[]
}

model DoctorSubscription {
    id        String                 @id @default(cuid())
    doctorId  String                 @unique
    doctor    Doctor                 @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    plan      DoctorSubscriptionPlan
    status    SubscriptionStatus
    startDate DateTime
    endDate   DateTime
    createdAt DateTime               @default(now())
    updatedAt DateTime               @updatedAt
    User      User[]
}

model HospitalSubscription {
    id         String                   @id @default(cuid())
    hospitalId String                   @unique
    hospital   Hospital                 @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
    plan       HospitalSubscriptionPlan
    status     SubscriptionStatus
    startDate  DateTime
    endDate    DateTime
    createdAt  DateTime                 @default(now())
    updatedAt  DateTime                 @updatedAt
    User       User[]
}

model MedicalHistory {
    id        String   @id @default(cuid())
    patientId String
    patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
    title     String // Short description of the medical history entry
    details   String? // JSON or text format for medical records
    createdBy String // Doctor or hospital ID that created the record
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([patientId]) // Index for quick lookups
}
