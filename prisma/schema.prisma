// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    super_admin
    hospital_admin
    independent_doctor
    hospital_doctor
    patient
}

enum InstitutionType {
    clinic
    hospital
}

enum UserGenre {
    male
    female
}

enum AppointmentStatus {
    PENDING
    CONFIRMED
    CANCELED
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique @db.VarChar(255)
    password      String    @db.Text
    role          UserRole
    emailVerified DateTime?
    isApproved    Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    userProfile          UserProfile?
    accounts             Account[]
    sessions             Session[]
    patientSubscriptions PatientSubscription[]
    institution          Institution? // If user is an institution admin
    doctor               Doctor?
    patient              Patient?
    MedicalHistory       MedicalHistory[]
}

model UserProfile {
    id              String           @id @default(cuid())
    userId          String           @unique
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    institutionType InstitutionType?
    phone           String?          @unique @db.VarChar(20)
    address         String?          @db.VarChar(255)
    city            String?
    state           String?
    zipCode         String?
    country         String?
    bio             String?
    avatarUrl       String?
    genre           UserGenre?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Institution {
    id          String          @id @default(cuid())
    name        String
    type        InstitutionType
    adminId     String          @unique
    admin       User            @relation(fields: [adminId], references: [id], onDelete: Cascade)
    address     String
    city        String
    state       String
    zipCode     String
    country     String
    phone       String
    email       String
    website     String?
    description String?
    logoUrl     String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    // Relations
    doctors       Doctor[]
    subscriptions InstitutionSubscription[]
}

model Doctor {
    id             String       @id @default(cuid())
    userId         String       @unique
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    institutionId  String?
    institution    Institution? @relation(fields: [institutionId], references: [id])
    specialization String
    licenseNumber  String       @unique
    isVerified     Boolean      @default(false)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    // Relations
    appointments                  Appointment[]
    IndependantDoctorSubscription IndependantDoctorSubscription[]
}

model Patient {
    id           String   @id @default(cuid())
    userId       String   @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateOfBirth  DateTime
    bloodType    String?
    allergies    String?
    medicalNotes String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    appointments     Appointment[]
    subscriptions    PatientSubscription[]
    medicalHistories MedicalHistory[]
}

model Appointment {
    id        String            @id @default(cuid())
    patientId String
    patient   Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctorId  String
    doctor    Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    date      DateTime
    status    AppointmentStatus @default(PENDING)
    createdAt DateTime          @default(now())
}

model MedicalHistory {
    id            String   @id @default(cuid())
    patientId     String
    patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
    title         String
    details       String?
    createdBy     String
    createdByUser User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@index([patientId]) // Index for quick lookups
}

// Here is the schema for the subscription

enum PatientSubscriptionPlan {
    free
    basic
    premium
}

enum InstitutionSubscriptionPlan {
    free
    standard
    enterprise
}

enum IndependantDoctorSubscriptionPlan {
    free
    basic
    premium
}

enum SubscriptionStatus {
    active
    inactive
    trial
    expired
}

model PatientSubscription {
    id        String                  @id @default(cuid())
    patientId String
    patient   Patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade)
    plan      PatientSubscriptionPlan
    status    SubscriptionStatus
    startDate DateTime
    endDate   DateTime
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt
    User      User?                   @relation(fields: [userId], references: [id])
    userId    String?

    @@unique([patientId, plan]) // Prevent duplicate plans for the same patient
}

model InstitutionSubscription {
    id            String                      @id @default(cuid())
    institutionId String
    institution   Institution                 @relation(fields: [institutionId], references: [id], onDelete: Cascade)
    plan          InstitutionSubscriptionPlan
    status        SubscriptionStatus
    startDate     DateTime
    endDate       DateTime
    createdAt     DateTime                    @default(now())
    updatedAt     DateTime                    @updatedAt

    @@unique([institutionId, plan]) // Prevent duplicate plans for the same institution
}

model IndependantDoctorSubscription {
    id        String                            @id @default(cuid())
    doctorId  String
    doctor    Doctor                            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    plan      IndependantDoctorSubscriptionPlan
    status    SubscriptionStatus
    startDate DateTime
    endDate   DateTime
    createdAt DateTime                          @default(now())
    updatedAt DateTime                          @updatedAt

    @@unique([doctorId, plan]) // Prevent duplicate plans for the same doctor
}
